python -m black {source_file_or_directory}
source venv/Scripts/activate
export DJANGO_SETTINGS_MODULE=src.settings.local
pytest -vv -s
python manage.py runserver --settings=src.settings.
python manage.py tailwind start --settings=src.settings.local
python manage.py makemigrations --settings=src.settings.test
python manage.py migrate --settings=src.settings.test
celery beat -l info
celery worker -l info
rabbitmqctl status
pip install -r requirements/local.txt
pre-commit install

pip install -r requirements/local.txt
export DATABASE_URL="postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}"
export CELERY_BROKER_URL="${REDIS_URL}"
export CELERY_BROKER_URL=redis://localhost:6379/0

docker compose -f docker-compose.local.yml build
docker compose -f docker-compose.local.yml up
export COMPOSE_FILE=docker-compose.local.yml
docker compose up -d
docker compose -f docker-compose.docs.yml up
docker compose -f docker-compose.local.yml run --rm django python manage.py migrate

from ninja import Router
from django.contrib.auth.forms import UserCreationForm
from allauth.account.forms import SignupForm
from allauth.account.views import SignupView
from django.http import HttpRequest

auth = Router()

@auth.post("register/")
def register(request: HttpRequest, data: UserCreationForm):
    # Use Django Allauth's SignupView to handle user registration
    signup_view = SignupView.as_view()
    signup_form = SignupForm(data)
    response = signup_view(request, form=signup_form)
    return {"message": "User registered successfully"}
In this example:

We define a register endpoint in Django Ninja for user registration.
The register endpoint accepts a UserCreationForm from the client containing registration data.
Inside the endpoint, we instantiate a SignupView from Django Allauth to handle user registration. We pass the UserCreationForm data to a SignupForm to validate the input.
After registration is successful, we return a success message to the client.











nginx:
    image: nginx:latest
    ports:
      - '80:80'
    volumes:
      - ./nginx/default.config:/etc/nginx/default.conf:ro
      - next_build:/frontend/build:ro
    depends_on:
      - django
      - node